<?php #//php_start\\;			/**	* @_QUERY_CONTROLLER	* Type: Object	* Charset: Any	* Desc: Database query statement builder	*/		class _QUERY_CONTROLLER	{		/**		* @_where 		* Type: Variable		* Charset: any		* Desc: Temporary holder of where statement		*/		protected $_where = "";				/**		* @qstmt_handler 		* Type: Variable		* Charset: any		* Desc: Temporary holder of declared statement		*/		protected $qstmt_handler = null;				/**		* @conn_handler 		* Type: Variable		* Charset: Object		* Desc: A database connection handler		*/		protected $conn_handler = null;				/**		* @db_prefix 		* Type: Variable		* Charset: string		* Desc: Database table prefix		*/		public $db_prefix = null;				/**		* @conn_type 		* Type: variable		* Charset: string		*/		public $conn_type = null;				/**		* @conn_handler 		* Type: method		* Charset: any		* Desc: A class contructor, assigning first required information on load before any other execution		*/		public function __construct($qstmt = null, $conn = null, $db_prefix = '', $conn_type = null, $_where = '')		{			/**			* @qstmt, a statment pass from the other method			* @conn, the required database connection that should always present in this class			*/									//Assigning connection to @conn_handler 			$this->conn_handler = $conn;						//Assigning prepared statement to @qstmt_handler 			$this->qstmt_handler = $qstmt;						//Assigning prepared table prefix to @db_prefix 			$this->db_prefix = $db_prefix;						//Assigning connectiontion type to @conn_type 			$this->conn_type = $conn_type;						$this->_where = $_where;		}				/**		* @data 		* Type: method		* Charset: any		* Desc: Use to assign data when insert or saving to database		*/		public function data($data = "", $static_val = "")		{						/**			* @data, can be name of field or can contain array with fields and values			* format static: string like 'fldname'			* format array: array like 'fldname' => 'value'			*/						/**			* @static_val, can be use if the @data is contain a string			*/						if(is_array($data) && empty($static_val)){				$fields = array();				$values = array();				foreach($data as $field => $value){					$fields[] = '`' . $field . '`';					$values[] = "'" . $this->escape_string($value) . "'";				}								$qstmt = $this->qstmt_handler . " (" . implode(', ', $fields) . ") VALUES (" . implode(', ', $values) . ")";			}else{				$qstmt = $this->qstmt_handler . " (`" . $data . "`) VALUES ('" . $this->escape_string($static_val) . "')";			}						return new _QUERY_CONTROLLER($qstmt, $this->conn_handler, $this->db_prefix, $this->conn_type);		}						/**		* @set 		* Type: method		* Charset: any		* Desc: Use to assign data when update or editing data from database		*/		public function set($data = "", $static_value = "", $is_multiinsert = false)		{						/**			* @data, can be name of field or can contain array with fields and values			* format static: string like 'fldname'			* format array: array like 'fldname' => 'value'			*/						/**			* @static_value, can be use if the @data is contain a string			*/									$fields = array();			if($is_multiinsert){				$values = array();				if(is_array($data) && empty($static_value)){					foreach($data as $field => $value){						$fields[] = '`' . $field . '`';						$values[] = "'" . $this->escape_string($value) . "'";					}				}else{					$fields[] = '`' . $data . '`';					$values[] = $this->escape_string($static_value);				}								$qstmt = $this->qstmt_handler . ' ( ' . implode(', ', $fields) . ') values ('. implode(', ', $values) .')';			}else{				if(is_array($data) && empty($static_value)){					foreach($data as $field => $value){						$fields[] = '`' . $field . '` = ' . "'" . $this->escape_string($value) . "'";					}				}else{					$fields[] = '`' . $data . '` = ' . "'" . $this->escape_string($static_value) . "'";				}								$qstmt = $this->qstmt_handler . ' SET ' . implode(', ', $fields);			}												return new _QUERY_CONTROLLER($qstmt, $this->conn_handler, $this->db_prefix, $this->conn_type);		}				/**		* @from 		* Type: method		* Charset: database_table		* Desc: Assigning primary database table		*/		public function from(){						//Count assigned arguments			$numargs = func_num_args();						//Get all assigned arguments			$arg_list = func_get_args();						switch($numargs){				case 2:					$qstmt = $this->qstmt_handler . ' FROM `' . $this->db_prefix . $arg_list[0] . '` AS ' . $arg_list[1] . ' ';				break;								case 1:					$qstmt = $this->qstmt_handler . ' FROM `' . $this->db_prefix . $arg_list[0] . '` ';				break;			}						return new _QUERY_CONTROLLER($qstmt, $this->conn_handler, $this->db_prefix, $this->conn_type);		}				/**		* @join 		* Type: method		* Charset: database_table		* Desc: Use to join other database table		*/		public function join()		{			//Count assigned arguments			$numargs = func_num_args();						//Get all assigned arguments			$arg_list = func_get_args();						switch($numargs){				case 2:					$qstmt = $this->qstmt_handler . ' JOIN `' . $this->db_prefix . $arg_list[0] . '` AS ' . $arg_list[1] . ' ';				break;								case 1:					$qstmt = $this->qstmt_handler . ' JOIN `' . $this->db_prefix . $arg_list[0] . '` ';				break;			}						return new _QUERY_CONTROLLER($qstmt, $this->conn_handler, $this->db_prefix, $this->conn_type);		}				/**		* @left_join 		* Type: method		* Charset: database_table		* Desc: Use to join other database table in left section		*/		public function left_join()		{			//Count assigned arguments			$numargs = func_num_args();						//Get all assigned arguments			$arg_list = func_get_args();						switch($numargs){				case 2:					$qstmt = $this->qstmt_handler . ' LEFT JOIN `' . $this->db_prefix . $arg_list[0] . '` AS ' . $arg_list[1] . ' ';				break;								case 1:					$qstmt = $this->qstmt_handler . ' LEFT JOIN `' . $this->db_prefix . $arg_list[0] . '` ';				break;			}						return new _QUERY_CONTROLLER($qstmt, $this->conn_handler, $this->db_prefix, $this->conn_type);		}				/**		* @right_join 		* Type: method		* Charset: database_table		* Desc: Use to join other database table in right section		*/		public function right_join()		{			//Count assigned arguments			$numargs = func_num_args();						//Get all assigned arguments			$arg_list = func_get_args();						switch($numargs){				case 2:					$qstmt = $this->qstmt_handler . ' RIGHT JOIN `' . $this->db_prefix . $arg_list[0] . '` AS ' . $arg_list[1] . ' ';				break;								case 1:					$qstmt = $this->qstmt_handler . ' RIGHT JOIN `' . $this->db_prefix . $arg_list[0] . '` ';				break;			}						return new _QUERY_CONTROLLER($qstmt, $this->conn_handler, $this->db_prefix, $this->conn_type);		}				/**		* @inner_join 		* Type: method		* Charset: database_table		* Desc: Use to join other database table in inner section		*/		public function inner_join()		{			//Count assigned arguments			$numargs = func_num_args();						//Get all assigned arguments			$arg_list = func_get_args();						switch($numargs){				case 2:					$qstmt = $this->qstmt_handler . ' INNER JOIN `' . $this->db_prefix . $arg_list[0] . '` AS ' . $arg_list[1] . ' ';				break;								case 1:					$qstmt = $this->qstmt_handler . ' INNER JOIN `' . $this->db_prefix . $arg_list[0] . '` ';				break;			}			return new _QUERY_CONTROLLER($qstmt, $this->conn_handler, $this->db_prefix, $this->conn_type);		}				/**		* @on 		* Type: method		* Charset: any		* Desc: Use to add condition on join tables		*-----------------------------------------------------		* ON arguments formats like		* -- if 4 arguments AND fld1 like fld2 		* -- if 3 arguments fld1 like fld2 		* -- if 2 arguments fld1 = fld2 		* -- if 1 argument meaning all parts defined by the user 		*/		public function on()		{			//Count assigned arguments			$numargs = func_num_args();						//Get all assigned arguments			$arg_list = func_get_args();						switch($numargs){				case 4:					$qstmt = $this->qstmt_handler .  ' ' . $arg_list[0] . ' ' . $arg_list[1]  . ' ' . $arg_list[2] . ' ' . $arg_list[3];				break;								case 3:					$qstmt = $this->qstmt_handler .  ' ON ' . $arg_list[0] . ' ' . $arg_list[1]  . ' ' . $arg_list[2];				break;								case 2:					$qstmt = $this->qstmt_handler .  ' ON ' . $arg_list[0] . ' = ' . $arg_list[1];				break;								case 1:					$qstmt = $this->qstmt_handler .  ' ' . $arg_list[0] . ' ';				break;			};						return new _QUERY_CONTROLLER($qstmt, $this->conn_handler, $this->db_prefix, $this->conn_type);		}				/**		* @replace 		* Type: method		* Charset: any		* Desc: Use to join other database table in inner section		* -----------------------------------------------		* @Replace, to replace custom parameters in the query		*/		public function replace($param, $newval = '')		{			$qstmt = $this->qstmt_handler;						if(is_array($param) && empty($newval)){				foreach($param as $key => $value){					$qstmt = str_replace(':' . $key, $value, $qstmt);				}			}else				$qstmt = str_replace(':' . $param, $newval, $qstmt);							return new _QUERY_CONTROLLER($qstmt, $this->conn_handler, $this->db_prefix, $this->conn_type);		}				/**		* @option 		* Type: method		* Charset: any		* Desc: Use to insert a user defined statement like union and etc.		*/		public function option($conp)		{			$qstmt = $this->qstmt_handler .  ' ' . $conp . ' ';			return new _QUERY_CONTROLLER($qstmt, $this->conn_handler, $this->db_prefix, $this->conn_type);		}				/**		* @order_by 		* Type: method		* Charset: string		* Desc: Use to sort results by the assigned field(s)		*/		public function order_by($request)		{			$qstmt = $this->qstmt_handler .  ' ORDER BY ' . $request . ' ';			return new _QUERY_CONTROLLER($qstmt, $this->conn_handler, $this->db_prefix, $this->conn_type);		}				/**		* @group_by 		* Type: method		* Charset: string		* Desc: Use to group results by the assigned field(s)		*/		public function group_by($request)		{			$qstmt = $this->qstmt_handler .  ' GROUP BY ' . $request . ' ';			return new _QUERY_CONTROLLER($qstmt, $this->conn_handler, $this->db_prefix, $this->conn_type);		}				/**		* @limit 		* Type: method		* Charset: integer		* Desc: To limit the database query results		*/		public function limit()		{			//Count assigned arguments			$numargs = func_num_args();						//Get all assigned arguments			$arg_list = func_get_args();						switch($numargs){				case 2 :						$qstmt = $this->qstmt_handler .  ' LIMIT ' . $arg_list[0] . ',' . $arg_list[1] . ' ';					break;				default :						$qstmt = $this->qstmt_handler .  ' LIMIT ' . $arg_list[0] . ' ';					break;			}						return new _QUERY_CONTROLLER($qstmt, $this->conn_handler, $this->db_prefix, $this->conn_type);		}				/**		* @where 		* Type: method		* Charset: any		* Desc: To add where condition on the statement 		*/		public function where()		{							//Count assigned arguments			$numargs = func_num_args();						//Get all assigned arguments			$arg_list = func_get_args();						switch($numargs){				case 2:						$where = $arg_list[0] . " = '" . $this->escape_string($arg_list[1]) . "'";					break;				case 3:						$where = $arg_list[0] . " " . $arg_list[1] . " '" . $this->escape_string($arg_list[2]) . "'";					break;				case 4:					/**					* If the 4rth argument is true meaning it is free query, user can declare own subqueries in where statement					* And if it set to false it execute like how 3rd argument works					*/										if($arg_list[3])						$where = $arg_list[0] . " " . $arg_list[1] . " " . $arg_list[2];					else						$where = $arg_list[0] . " " . $arg_list[1] . " '" . $this->escape_string($arg_list[2]) . "'";					break;				default:										$where = $arg_list[0];										/**					* Check the where statement is set to an array					*/					if(is_array($where) && count($where) > 0){						$where_fields = array();												$counter = 1;						/**						* SQL where statement extension						*/						$track_extension = false;												foreach($where as $wf => $v){													$where_fields[] = ' ' . $wf . ' ';														if(is_array($v)){								foreach($v as $key => $val){									if(is_array($val)){										foreach($val as $tk => $tv){											$where_fields[] .= $key . " '" . $tk . "' " . $this->escape_string($tv);											$track_extension = true;										}									}else{										$where_fields[] .= $key . " '" . $this->escape_string($val) . "'";										$track_extension = false;									}								}							}else{								$where_fields[] .= ' = ' . "'" . $this->escape_string($v) . "' ";								$track_extension = false;							}														if($counter < count($where)){								if(!$track_extension){									/**									* default sql concatinator									*/									$where_fields[] .=  ' AND ';								}							}														$counter++;						}												$where = implode(' ', $where_fields);											}else{						$where = $where != "" ? $where : "";					}				break;			}												if($this->_where == ""){				$this->_where = ' WHERE ' . $where;			}else{				$this->_where = ' AND ' . $where;			}						$qstmt = $this->qstmt_handler . $this->_where;			return new _QUERY_CONTROLLER($qstmt, $this->conn_handler, $this->db_prefix, $this->conn_type, $this->_where);		}				/**		* @or_where 		* Type: method		* Charset: any		* Desc: To add or in where condition on the statement 		*/		public function or_where($where = "")		{				//Count assigned arguments			$numargs = func_num_args();						//Get all assigned arguments			$arg_list = func_get_args();						switch($numargs){				case 2:						$where = $arg_list[0] . " = '" . $this->escape_string($arg_list[1]) . "'";					break;				case 3:						$where = $arg_list[0] . " " . $arg_list[1] . " '" . $this->escape_string($arg_list[2]) . "'";					break;				case 4:					/**					* If the 4rth argument is true meaning it is free query, user can declare own subqueries in where statement					* And if it set to false it execute like how 3rd argument works					*/										if($arg_list[3])						$where = $arg_list[0] . " " . $arg_list[1] . " " . $arg_list[2];					else						$where = $arg_list[0] . " " . $arg_list[1] . " '" . $this->escape_string($arg_list[2]) . "'";					break;				default:										$where = $arg_list[0];										/**					* Check the where statement is set to an array					*/					if(is_array($where) && count($where) > 0){						$where_fields = array();												$counter = 1;						/**						* SQL where statement extension						*/						$track_extension = false;												foreach($where as $wf => $v){													$where_fields[] = ' ' . $wf . ' ';														if(is_array($v)){								foreach($v as $key => $val){									if(is_array($val)){										foreach($val as $tk => $tv){											$where_fields[] .= $key . " '" . $tk . "' " . $this->escape_string($tv);											$track_extension = true;										}									}else{										$where_fields[] .= $key . " '" . $this->escape_string($val) . "'";										$track_extension = false;									}								}							}else{								$where_fields[] .= ' = ' . "'" . $this->escape_string($v) . "' ";								$track_extension = false;							}														if($counter < count($where)){								if(!$track_extension){									/**									* default sql concatinator									*/									$where_fields[] .=  ' OR ';								}							}														$counter++;						}												$where = implode(' ', $where_fields);											}else{						$where = $where != "" ? $where : "";					}				break;			}												$this->_where = ' OR ' . $where;						$qstmt = $this->qstmt_handler . $this->_where;			return new _QUERY_CONTROLLER($qstmt, $this->conn_handler, $this->db_prefix, $this->conn_type, $this->_where);		}				/**		* @escape_string 		* Type: method		* Charset: string		* Desc: To clean value of the field		*/		public function escape_string($value)		{			if($this->conn_type == 'mysqli'){				return mysqli_real_escape_string($this->conn_handler, $value ?? '');			}else{				return mysql_real_escape_string($value ?? '', $this->conn_handler);			}		}				/**		* @_debug 		* Type: method		* Charset: any		* Desc: To show declared statements for checking or reviewing		*/		public function _debug()		{			return $this->qstmt_handler;		}				/**		* @affected_rows 		* Type: method		* Charset: integer		* Desc: To display affected rows, mostly applicable in update and select statement		*/		public function affected_rows()		{			if($this->conn_type == 'mysqli')				return @mysqli_affected_rows($this->conn_handler);			else				return @mysql_affected_rows($this->conn_handler);		}				/**		* @insert_id 		* Type: method		* Charset: integer		* Desc: To display new inserted id, applicable only at insert statement		*/		public function insert_id()		{			if($this->conn_type == 'mysqli')				return @mysqli_insert_id($this->conn_handler);			else				return @mysql_insert_id($this->conn_handler);		}				/**		* @run 		* Type: method		* Charset: any		* Desc: To execute the declared statment		*/		public function run($as_string = false)		{			if($as_string){				return $this->qstmt_handler;			}else{				try{					if($this->conn_type == 'mysqli')						$qstmt = @mysqli_query($this->conn_handler, $this->qstmt_handler);					else						$qstmt = @mysql_query($this->qstmt_handler, $this->conn_handler);										if(!$qstmt){						 throw new Exception($this->qstmt_handler);					}										return new _QUERY_CONTROLLER($qstmt, $this->conn_handler, $this->db_prefix, $this->conn_type, $this->_where);									}catch(Exception $e){					trigger_error($e->getMessage(), E_USER_WARNING);				}			}		}				/**		* @fetch_object 		* Type: method		* Charset: object		* Desc: To fetch results as object state		*/		public function fetch_object()		{			if($this->conn_type == 'mysqli')				return mysqli_fetch_object($this->qstmt_handler);			else				return mysql_fetch_object($this->qstmt_handler);					}				/**		* @fetch_array 		* Type: method		* Charset: array		* Desc: To fetch results as array state		*/		public function fetch_array()		{			if($this->conn_type == 'mysqli')				return mysqli_fetch_array($this->qstmt_handler);			else				return mysql_fetch_array($this->qstmt_handler);		}						/**		* @fetch_assoc 		* Type: method		* Charset: array		* Desc: To fetch results as associative array		*/		public function fetch_assoc()		{			if($this->conn_type == 'mysqli')				return mysqli_fetch_assoc($this->qstmt_handler);			else				return mysql_fetch_assoc($this->qstmt_handler);		}				/**		* @fetch_row 		* Type: method		* Charset: array		* Desc: To fetch results by row		*/		public function fetch_row()		{			if($this->conn_type == 'mysqli')				return mysqli_fetch_row($this->qstmt_handler);			else				return mysql_fetch_row($this->qstmt_handler);		}				/**		* @num_fields 		* Type: method		* Charset: integet		* Desc: To get number of fields in the results		*/		public function num_fields()		{			if($this->conn_type == 'mysqli')				return mysqli_num_fields($this->qstmt_handler);			else				return mysql_num_fields($this->qstmt_handler);		}				/**		* @num_rows 		* Type: method		* Charset: integet		* Desc: To get number of results		*/		public function num_rows()		{			if($this->conn_type == 'mysqli')				return @mysqli_num_rows($this->qstmt_handler);			else				return @mysql_num_rows($this->qstmt_handler);		}				/**		* @free_result 		* Type: method		* Charset: bolean		* Desc: will free all memory associated with the result identifier result. 				only needs to be called if you are concerned about how much memory is 				being used for queries that return large result sets. All associated result memory is 				automatically freed at the end of the script's execution.		*/		public function free_result()		{			if($this->conn_type == 'mysqli')				return mysqli_free_result($this->qstmt_handler);			else				return mysql_free_result($this->qstmt_handler);		}				/**		* @field_name 		* Type: method		* Charset: string		* Desc: To get name of the table field		*/		function field_name($fieldno)		{			if($this->conn_type == 'mysqli')				return mysqli_field_name($this->qstmt_handler, $fieldno);			else				return mysql_field_name($this->qstmt_handler, $fieldno);		}				/**		* @field_type 		* Type: method		* Charset: any		* Desc: To get the type of field		*/		public function field_type($fieldno)		{			if($this->conn_type == 'mysqli')				return mysqli_field_type($this->qstmt_handler, $fieldno);			else				return mysql_field_type($this->qstmt_handler, $fieldno);		}				/**		* @field_info 		* Type: method		* Charset: array		* Desc: To get the information of the field		*/		public function field_info($fieldno = NULL)		{			if($this->conn_type == 'mysqli'){				if (is_null($fieldno)) {					return mysqli_fetch_field($this->qstmt_handler);				} else {					return mysqli_fetch_field($this->qstmt_handler, $fieldno);				}			}else{				if (is_null($fieldno)) {					return mysql_fetch_field($this->qstmt_handler);				} else {					return mysql_fetch_field($this->qstmt_handler, $fieldno);				}			}		}				/**		* @data_seek 		* Type: method		* Charset: any		* Desc: To pick data in the specific row		*/		public function data_seek($row)		{				if($this->conn_type == 'mysqli'){				if($this->num_rows($this->qstmt_handler)) return mysqli_data_seek($this->qstmt_handler, $row);			}else{				if($this->num_rows($this->qstmt_handler)) return mysql_data_seek($this->qstmt_handler, $row);			}		}	}	#//php_end\\;?>